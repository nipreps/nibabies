_machine_defaults: &machine_defaults
  environment:
    TZ: "/usr/share/zoneinfo/America/New_York"
    SCRATCH: "/scratch"
  machine:
    image: ubuntu-2004:current
    docker_layer_caching: true
  working_directory: /tmp/src/nibabies

_python_defaults: &python_defaults
  docker:
    - image: circleci/python:3.9.6
  working_directory: /tmp/src/nibabies


_docker_auth: &docker_auth
  name: Docker authentication
  command: |
    if [[ -n $DOCKER_PAT ]]; then
      echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
    fi

_setup_docker_registry: &setup_docker_registry
  name: Set up Docker registry
  command: |
    if [[ -f /tmp/images/registry.tar.gz ]]; then
      echo "Loading saved registry image"
      docker load < /tmp/images/registry.tar.gz
    else
      echo "Pulling registry image from DockerHub"
      docker pull registry:2
    fi
    docker run -d -p 5000:5000 --restart=always --name=registry \
        -v /tmp/docker:/var/lib/registry registry:2

_pull_from_registry: &pull_from_registry
  name: Pull and tag image from local registry
  command: |
    docker pull localhost:5000/nibabies
    docker tag localhost:5000/nibabies nipreps/nibabies:latest

version: 2.1
orbs:
  docker: circleci/docker@1.6.0

jobs:

  build:
    <<: *machine_defaults
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v4-{{ .Branch }}-{{ .Revision }}
            - build-v4--{{ .Revision }}
            - build-v4-{{ .Branch }}-
            - build-v4-master-
            - build-v4-
          paths:
            - /tmp/docker
            - /tmp/images
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run:
          name: Save Docker registry
          command: |
            if [[ ! -f /tmp/images/registry.tar.gz ]]; then
              mkdir -p /tmp/images
              docker save registry:2 | gzip > /tmp/images/registry.tar.gz
            fi
      - run:
          name: Pull images
          command: |
            set +e
            docker pull localhost:5000/ubuntu
            success=$?
            set -e
            if [[ "$success" = "0" ]]; then
                echo "Pulling from local registry"
                docker tag localhost:5000/ubuntu ubuntu:focal
                docker pull localhost:5000/nibabies
                docker tag localhost:5000/nibabies nipreps/nibabies:latest
                docker tag localhost:5000/nibabies nipreps/nibabies
            else
                echo "Pulling from Docker Hub"
                docker pull ubuntu:focal
                docker tag ubuntu:focal localhost:5000/ubuntu
                docker push localhost:5000/ubuntu
                docker pull nipreps/nibabies:unstable || true
            fi
      - run:
          name: Build Docker image
          no_output_timeout: 60m
          command: |
            export PY3=$(pyenv versions | grep '3\.' |
                         sed -e 's/.* 3\./3./' -e 's/ .*//')
            pyenv local $PY3
            # Get version, update files.
            THISVERSION=$( python3 get_version.py )
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            sed -i -E "s/(__version__ = )'[A-Za-z0-9.-]+'/\1'${CIRCLE_TAG:-$THISVERSION}'/" wrapper/nibabies_wrapper.py
            sed -i "s/title = {nibabies}/title = {nibabies ${CIRCLE_TAG:-$THISVERSION}}/" nibabies/data/boilerplate.bib
            # Build docker image
            e=1 && for i in {1..5}; do
              docker build --rm \
                --cache-from=nipreps/nibabies \
                -t nipreps/nibabies:latest \
                --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
                --build-arg VCS_REF=`git rev-parse --short HEAD` \
                --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" . \
              && e=0 && break || sleep 15
            done && [ "$e" -eq "0" ]
      - run:
          name: Verify Docker image version
          command: |
            if [[ -n $CIRCLE_TAG ]]; then
              DOCKER_VERSION=$( docker run --rm -i nipreps/nibabies:latest --version | sed s/NiBabies\ v//g)
              if [[ $DOCKER_VERSION != $CIRCLE_TAG ]]; then
                echo "Docker image version ($DOCKER_VERSION) does not match CircleCI tag ($CIRCLE_TAG)"
                exit 1
              fi
            fi
      - run:
          name: Docker push to local registry
          no_output_timeout: 40m
          command: |
            docker tag nipreps/nibabies:latest localhost:5000/nibabies
            docker push localhost:5000/nibabies
      - run:
          name: Docker registry garbage collection
          command: |
            docker exec -it registry /bin/registry garbage-collect --delete-untagged \
              /etc/docker/registry/config.yml
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/nibabies
      - save_cache:
         key: build-v4-{{ .Branch }}-{{ .Revision }}
         paths:
            - /tmp/docker
            - /tmp/images

  get_data:
    docker:
      - image: continuumio/miniconda3:4.10.3-alpine
    working_directory: /home/circleci/data
    steps:
      - restore_cache:
          keys:
            - data-v3-{{ .Branch }}-{{ .Revision }}
            - data-v3--{{ .Revision }}
            - data-v3-{{ .Branch }}-
            - data-v3-master-
            - data-v3-
      - run:
          name: Install datalad + git-annex
          command: |
            if [[ ! -d /tmp/data/bcp ]]; then
              apk update && apk add --no-cache ca-certificates coreutils
              conda install -y -c anaconda -c conda-forge git-annex datalad
              # set config because datalad says so
              git config --global user.name "Nipreps CI"
              git config --global user.email "nipreps@gmail.com"
            fi
      - run:
          name: Get bcp test data
          command: |
            if [[ ! -d /tmp/data/bcp ]]; then
              echo "Downloading data"
              mkdir -p /tmp/data
                # avoid datalad symlinks to avoid binding problems
                datalad clone https://gin.g-node.org/nipreps-data/bcp /tmp/data/bcp && cd /tmp/data/bcp && datalad get -J2 sub-01
                datalad clone https://gin.g-node.org/nipreps-data/bcp-derivatives /tmp/data/bcp/derivatives && cd /tmp/data/bcp/derivatives && datalad get . -J2
                cd /tmp/data/bcp && datalad unlock -r . && chmod -R a+w .
            else
              echo "Reusing cached data"
            fi
      - save_cache:
         key: data-v3-{{ .Branch }}-{{ .Revision }}
         paths:
            - /tmp/data
      - run:
          name: Store FreeSurfer license file
          command: |
            mkdir -p /tmp/fslicense
            cd /tmp/fslicense
            echo "cHJpbnRmICJrcnp5c3p0b2YuZ29yZ29sZXdza2lAZ21haWwuY29tXG41MTcyXG4gKkN2dW12RVYzelRmZ1xuRlM1Si8yYzFhZ2c0RVxuIiA+IGxpY2Vuc2UudHh0Cg==" | base64 -d | sh
      - run:
          name: Create Nipype config files
          command: |
            mkdir -p /tmp/bcp
            printf "[execution]\nstop_on_first_crash = true\n" > /tmp/bcp/nipype.cfg
            echo "poll_sleep_duration = 0.01" >> /tmp/bcp/nipype.cfg
            echo "hash_method = content" >> /tmp/bcp/nipype.cfg
      - persist_to_workspace:
          root: /tmp
          paths:
            - fslicense
            - bcp/nipype.cfg

  test_pytest:
    <<: *machine_defaults
    steps:
      - checkout:
          path: /home/circleci/src/nibabies
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/nibabies
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?tests\]' )" != "" ]]; then
              echo "Skipping pytest job"
              circleci step halt
            fi
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - build-v4-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
      - restore_cache:
          keys:
            - data-v3-{{ .Branch }}-{{ .Revision }}
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run: *pull_from_registry
      - run:
          name: Run nibabies tests
          no_output_timeout: 2h
          command: |
            docker run -ti --rm=false \
              -e TEST_READONLY_FILESYSTEM=1 -v $HOME:/home/readonly:ro \
              --entrypoint="pytest" nipreps/nibabies:latest \
              /src/nibabies/nibabies -svx --doctest-modules
      - run:
          name: Test nibabies-wrapper (Python 2)
          command: |
            export PY2=$(pyenv versions | grep '2\.' |
                         sed -e 's/.* 2\./2./' -e 's/ .*//')
            pyenv local $PY2
            echo -n "Python version: "
            python --version
            pip install --upgrade "pip<21" "setuptools<45"
            pip install --upgrade wrapper/
            which nibabies-wrapper
            nibabies-wrapper --help
            nibabies-wrapper --version
      - run:
          name: Test nibabies-wrapper (Python 3)
          command: |
            export PY3=$(pyenv versions | grep '3\.' |
                         sed -e 's/.* 3\./3./' -e 's/ .*//')
            pyenv local $PY3
            echo -n "Python version: "
            python --version
            pip install --upgrade pip setuptools
            pip install --upgrade wrapper/
            which nibabies-wrapper
            nibabies-wrapper --help
            nibabies-wrapper --version
      - store_artifacts:
          path: /tmp/data/reports

  test_bcp:
    environment:
      - FS_LICENSE: /tmp/fslicense/license.txt
      - DATASET: bcp
    <<: *machine_defaults
    steps:
      - checkout:
          path: /home/circleci/src/nibabies
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/nibabies
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?bcp\]' )" != "" ]]; then
              echo "Skipping bcp build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[no[ _-]?fasttrack\]' )" != "" ]]; then
              touch /tmp/.nofasttrack
              echo "Anatomical fasttrack reusing sMRIPrep's derivatives will not be used."
            fi
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys:
            - build-v4-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
      - restore_cache:
          keys:
            - data-v3-{{ .Branch }}-{{ .Revision }}
      - restore_cache:
          keys:
            - bcp-anat-v0-{{ .Branch }}-{{ .Revision }}
            - bcp-anat-v0--{{ .Revision }}
            - bcp-anat-v0-{{ .Branch }}-
            - bcp-anat-v0-master-
            - bcp-anat-v0-
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run: *pull_from_registry
      - run:
          name: Setting up test
          command: |
            export PY3=$(pyenv versions | grep '3\.' |
                         sed -e 's/.* 3\./3./' -e 's/ .*//')
            pyenv local $PY3
            mkdir -p /tmp/${DATASET}/derivatives
            pip install --upgrade pip setuptools
            pip install --upgrade /tmp/src/nibabies/wrapper/
      - run:
          name: Run nibabies anatomical with precomputed derivatives
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/${DATASET}/work /tmp/${DATASET}/derivatives/nibabies
            nibabies-wrapper docker /tmp/data/${DATASET} /tmp/${DATASET}/derivatives/nibabies participant \
                -i nipreps/nibabies:latest \
                -e NIBABIES_DEV 1 --user $(id -u):$(id -g) \
                --network none \
                --config $PWD/nipype.cfg -w /tmp/${DATASET}/work \
                --fs-subjects-dir /tmp/data/${DATASET}/derivatives/infant-freesurfer \
                --skull-strip-template UNCInfant:cohort-1 \
                --output-spaces MNIInfant:cohort-1 func \
                --sloppy --write-graph --mem_mb 8192 \
                --nthreads 2 -vv --age-months 2 --sloppy \
                --derivatives /tmp/data/${DATASET}/derivatives/precomputed \
                --output-layout bids --anat-only
      - run:
          name: Checking outputs of anatomical nibabies run
          command: |
            mkdir -p /tmp/${DATASET}/test
            CHECK_OUTPUTS_FILE="${DATASET}_anat_outputs.txt"
            cd /tmp/${DATASET}/derivatives/nibabies && tree -I 'figures|log' -lifa --noreport | sed s+^\./++ | sed '1d' | sort > /tmp/${DATASET}/test/outputs.out
            diff /tmp/src/nibabies/.circleci/${CHECK_OUTPUTS_FILE} /tmp/${DATASET}/test/outputs.out
            rm -rf /tmp/${DATASET}/test
            exit $?
      - run:
          name: Rerun nibabies with BOLD data
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/${DATASET}/work /tmp/${DATASET}/derivatives/nibabies
            nibabies-wrapper docker /tmp/data/${DATASET} /tmp/${DATASET}/derivatives/nibabies participant \
                -i nipreps/nibabies:latest \
                -e NIBABIES_DEV 1 --user $(id -u):$(id -g) \
                --network none \
                --config $PWD/nipype.cfg -w /tmp/${DATASET}/work \
                --fs-subjects-dir /tmp/data/${DATASET}/derivatives/infant-freesurfer \
                --skull-strip-template UNCInfant:cohort-1 \
                --output-spaces MNIInfant:cohort-1 func \
                --sloppy --write-graph --mem_mb 8192 \
                --nthreads 2 -vv --age-months 2 --sloppy \
                --derivatives /tmp/data/${DATASET}/derivatives/precomputed \
                --output-layout bids
      - run:
          name: Checking outputs of full nibabies run
          command: |
            mkdir -p /tmp/${DATASET}/test
            CHECK_OUTPUTS_FILE="${DATASET}_full_outputs.txt"
            cd /tmp/${DATASET}/derivatives/nibabies && tree -I 'figures|log' -lifa --noreport | sed s+^\./++ | sed '1d' | sort > /tmp/${DATASET}/test/outputs.out
            cat /tmp/${DATASET}/test/outputs.out
            diff /tmp/src/nibabies/.circleci/${CHECK_OUTPUTS_FILE} /tmp/${DATASET}/test/outputs.out
            rm -rf /tmp/${DATASET}/test
            exit $?
      - store_artifacts:
          path: /tmp/bcp/derivatives

  deploy_docker_patches:
    <<: *machine_defaults
    steps:
      - run:
          name: Check whether image should be deployed to Docker Hub
          command: |
            if [[ "$CIRCLE_PROJECT_USERNAME" != "nipreps" ]]; then
              echo "Nothing to deploy for $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME."
              circleci step halt
            fi
      - checkout:
          path: /home/circleci/src/nibabies
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/nibabies
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v4-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run: *pull_from_registry
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            docker tag nipreps/nibabies nipreps/nibabies:${CIRCLE_BRANCH#docker/}
            docker push nipreps/nibabies:${CIRCLE_BRANCH#docker/}

  deploy_docker:
    <<: *machine_defaults
    steps:
      - checkout:
          path: /home/circleci/src/nibabies
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/nibabies
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - build-v4-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/docker
            - /tmp/images
      - docker/install-docker-credential-helper
      - run: *docker_auth
      - run: *setup_docker_registry
      - run: *pull_from_registry
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ -n "$DOCKER_PAT" ]]; then
              echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
              docker tag nipreps/nibabies nipreps/nibabies:unstable
              docker push nipreps/nibabies:unstable
              if [[ -n "$CIRCLE_TAG" ]]; then
                docker push nipreps/nibabies:latest
                docker tag nipreps/nibabies nipreps/nibabies:$CIRCLE_TAG
                docker push nipreps/nibabies:$CIRCLE_TAG
              fi
            fi

  test_deploy_pypi:
    <<: *python_defaults
    steps:
      - checkout
      - run:
          name: Build nibabies
          command: |
            python -m pip install --user twine  # For use in checking distributions
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            virtualenv --python=python build
            source build/bin/activate
            pip install --upgrade "pip>=19.1" numpy
            echo "${CIRCLE_TAG:-$THISVERSION}" > nibabies/VERSION
            python setup.py sdist
            python -m pip wheel --no-deps -w dist/ .
      - store_artifacts:
          path: /tmp/src/nibabies/dist
      - run:
          name: Check sdist distribution
          command: |
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            python -m twine check dist/nibabies*.tar.gz
            virtualenv --python=python sdist
            source sdist/bin/activate
            python -m pip install --upgrade "pip>=19.1" numpy
            python -m pip install dist/nibabies*.tar.gz
            which nibabies | grep sdist\\/bin
            INSTALLED_VERSION=$(nibabies --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"NiBabies v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - run:
          name: Check wheel distribution
          command: |
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            python -m twine check dist/nibabies*.whl
            virtualenv --python=python wheel
            source wheel/bin/activate
            python -m pip install dist/nibabies*.whl
            which nibabies | grep wheel\\/bin
            INSTALLED_VERSION=$(nibabies --version)
            INSTALLED_VERSION=${INSTALLED_VERSION%$'\r'}
            INSTALLED_VERSION=${INSTALLED_VERSION#*"NiBabies v"}
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VERSION\""
            test "$INSTALLED_VERSION" = "$THISVERSION"
      - run:
          name: Build nibabies-wrapper
          command: |
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            cd wrapper
            virtualenv --python=python build
            source build/bin/activate
            python -m pip install --upgrade "pip>=19.1"
            sed -i -E "s/(__version__ = )'[A-Za-z0-9.-]+'/\1'${CIRCLE_TAG:-$THISVERSION}'/" nibabies_wrapper.py
            python setup.py sdist
            python -m pip wheel --no-deps -w dist/ .
      - store_artifacts:
          path: /tmp/src/nibabies/wrapper/dist

  deploy_pypi:
    <<: *python_defaults
    steps:
      - checkout
      - run:
          name: Build nibabies
          command: |
            THISVERSION=$( python get_version.py )
            virtualenv --python=python build
            source build/bin/activate
            python -m pip install --upgrade "pip>=19.1"
            echo "${CIRCLE_TAG:-$THISVERSION}" > nibabies/VERSION
            python setup.py sdist
            python -m pip wheel --no-deps -w dist/ .
      - run:
          name: Build nibabies-wrapper
          command: |
            THISVERSION=$( python get_version.py )
            cd wrapper
            virtualenv --python=python build
            source build/bin/activate
            python -m pip install --upgrade "pip>=19.1"
            sed -i -E "s/(__version__ = )'[A-Za-z0-9.-]+'/\1'${CIRCLE_TAG:-$THISVERSION}'/" nibabies_wrapper.py
            python setup.py sdist
            python -m pip wheel --no-deps -w dist/ .
      - run:
          name: Upload packages to PyPI
          command: |
            python -m pip install --user twine
            # upload nibabies
            export TWINE_PASSWORD=$PYPI_NIBABIES_TOKEN
            python -m twine upload dist/nibabies*
            # upload wrapper
            export TWINE_PASSWORD=$PYPI_WRAPPER_TOKEN
            python -m twine upload wrapper/dist/nibabies*

  deployable:
    docker:
      - image: busybox:latest
    steps:
      - run: echo Deploying!


workflows:
  version: 2
  build_test_deploy:
    jobs:

      - build:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      - test_deploy_pypi:
          filters:
            branches:
              only:
                - /rel\/.*/
                - /maint\/.*/
            tags:
              only: /.*/

      - test_pytest:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      - test_bcp:
          requires:
            - get_data
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      - deploy_docker_patches:
          requires:
            - build
          filters:
            branches:
              only: /docker\/.*/

      - deployable:
          requires:
            - test_deploy_pypi
            - test_pytest
            - test_bcp
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_docker:
          requires:
            - deployable
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_pypi:
          requires:
            - deployable
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
